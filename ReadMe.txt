{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12940\viewh14460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Everything is made with python 3 and Pyqt5.\
The version may look a bit different on the PC but is optimised for the touchscreen display as dimensions and fonts are not directly translated. Fonts are enlarged and x direction is a bit shrunk on the pi.\
\
*********************************\
Qt Designer development environment is used to create the outlines of the pages. Therefore widgets such as labels, pushbuttons and textEdits are placed in the frame using the software and then a code is autogenerated. To insert images, first a resource file must be selected or created from the Qt Designer that is then used to pick the images.\
\
Both the .ui file and the .qrc file then need to be translated to python code. This is done automatically using the commands found below.\
\
To create a .py file from a .ui file\
- pyuic5 -x survey.ui -o -survey.py\
\
To create a .py file from a .qrc file\
- pyrcc5 survey.qrc -o survey.py\
\
\
**********************************\
\
Graphics are displayed using Pyqtgraph which has 2 different display widgets. \'93ImageView\'94 is used for a 2D plot and \'93PlotWidget\'94 is used to visualise the 32 by 32 array. \
- See \'93runTests.py\'94 file on how to import and use.\
\
***********************************\
\
The platform app is initialised by running initialPage.py. This allows smooth navigation as it displays subsequent pages in full screen (800x480) which is optimised for the touch display.
\f1\fs56 \cf2 \expnd0\expndtw0\kerning0
\

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
Files \'93set_file.py\'94, \'93Test_file.py\'94, \'93First_page_file.py\'94, only contain the information for the images that are imported to the other files. That is their only use and they are translated using the the qrc files created in Qt designer.\
\
\
initialPage.py - initialises the app, each of the 3 buttons opens the corresponding page. This page never closes, the other pages just open and close above it with this page on the background.\
\
diagnoseFirst.py - On clicking the continue button, the next page is opened and the current one is closed. \
- A .txt file named \'93patient.txt\'94 is created. This file is overwritten each time a new patient\'92s details are inserted. Information from this page and each of the next pages is appended to the .txt file as a \'93str\'94 and occupy a new row. \
\
diagnoseSecond.py - Similar to the previous page, but also contains sliders and toggle buttons. I tried to modify the code to print a \'93-\'93 when no data are presented. I am not sure if this is a good idea but it would avoid weird errors from arising when appending and pulling from the csv file.\
\
diagnoseThird.py - similar to previous page\
\
diagnoseSymptoms.py - similar to the other 2 pages but now with numerous toggle buttons, that can be selected at the same time.\
\
diagnoseCartridge - This page goes reads the .txt file that we have filled with data during the previous pages. It appends all the data in the predefined csv file. (Commented this part out for the time being, but is fully functional).\
- When clicking the cancel button data are not stored and the initial page is displayed.\
\
medical_record.py - This is a tab widget page containing 4 tabs (4 different pages). This looked a bit ugly so I changed its format.  The page is shifted up in order to hide the tabs (see setStylesheet), and then implemented my own way of navigating though the tabs with the left and right buttons.\
- The page can handle up to 19 patients. Each patient is assigned a specific row sequentially. The page goes to the csv file and picks the name of the patient and prints it on the hidden label of each row. \
- The icons of the medical record are linked to a display widget. This widget is updated with the \'93report\'94 of each patient, which is directly picked from the csv file.\
\
\
\
\
\
*********************\
Last Day file\
\
-Contains the last changes made to the code\
-Contains sample debug pages\
-Now has the option to re-examine an existing patient.\
-2 CSV files are created, one with all the reports and one with all the unique patients.\
- Medical record is now modified and creates a new line for each patient and not each report.\
- If more than one report exists for the patient we can navigate through the reports\
- This is done with the help of the pandas library and It uses the surname of the patient as the key which of course can be changed}